/*
 * Copyright (c) 2022 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

&mt {
    //  flavor = "tap-preferred";
    // tapping-term-ms = <200>;
};

/ {
    combos {
        compatible = "zmk,combos";

        combo_esc {
            timeout-ms = <50>;
            key-positions = <0 1>;
            bindings = <&kp ESC>;
        };

        combo_tab {
            timeout-ms = <50>;
            key-positions = <10 11>;
            bindings = <&kp TAB>;
        };

        combo_ralt {
            timeout-ms = <50>;
            key-positions = <17 16>;
            bindings = <&kp RALT>;
        };

        combo_lalt {
            timeout-ms = <50>;
            key-positions = <11 12>;
            bindings = <&kp LALT>;
        };

        combo_lgui {
            timeout-ms = <50>;
            key-positions = <12 13>;
            bindings = <&kp LGUI>;
        };

        combo_rgui {
            timeout-ms = <50>;
            key-positions = <17 18>;
            bindings = <&kp RGUI>;
        };

        work_email {
            bindings = <&work_email>;
            key-positions = <1 2>;
        };
    };

    macros {
        work_email: work_email {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp D &kp A &kp M &kp I &kp E &kp N &kp DOT &kp C &kp A &kp R &kp U &kp S &kp O &kp AT &kp T &kp E &kp A &kp M &kp DOT &kp A &kp U &kp S &kp S &kp I &kp E &kp B &kp R &kp O &kp A &kp D &kp B &kp A &kp N &kp D &kp DOT &kp C &kp O &kp M &kp DOT &kp A &kp U>;
            label = "WORK_EMAIL";
        };
    };

    behaviors {
        layer_change: layer_change {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER_CHANGE";
            #binding-cells = <0>;
            bindings = <&to 0>, <&to 1>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q             &kp W          &kp E         &kp R          &kp T    &kp Y  &kp U  &kp I      &kp O      &kp P
&kp A             &kp S          &kp D         &kp F          &kp G    &kp H  &kp J  &kp K      &kp L      &kp SQT
&kp Z             &mt K_CUT X    &mt K_COPY C  &mt K_PASTE V  &kp B    &kp N  &kp M  &kp COMMA  &kp DOT    &mt LSHFT RET
&mt LSHFT K_COPY  &layer_change                                                                 &kp SPACE  &mo 2
            >;
        };

        left_layer {
            bindings = <
&kp F1   &kp F2         &kp F3           &kp F4           &kp N5        &kp MINUS  &kp N7  &kp N8  &kp N9    &kp N0
&kp F5   &kp N2         &kp DQT          &kp PIPE2        &kp HASH      &kp EQUAL  &kp N4  &kp N5  &kp N6    &kp BACKSPACE
&kp ESC  &kp TILDE      &kp NON_US_BSLH  &kp NON_US_HASH  &kp TILDE2    &kp MINUS  &kp N1  &kp N2  &kp N3    &kp DEL
&mo 1    &layer_change                                                                             &kp RGUI  &kp SPACE
            >;
        };

        right_layer {
            bindings = <
&kp EXCL   &kp AT       &kp HASH  &kp DLLR   &kp PRCNT    &kp CARET  &kp AMPS      &kp KP_MULTIPLY  &kp LPAR   &kp RPAR
&kp HASH   &kp QMARK    &kp FSLH  &kp COLON  &kp SEMI     &kp MINUS  &kp KP_EQUAL  &kp LBRC         &kp RBRC   &kp BSPC
&kp LSHFT  &kp KP_PLUS  &kp LBKT  &kp RBKT   &kp BSLH     &kp UNDER  &kp LEFT      &kp DOWN         &kp UP     &kp RIGHT
&mo 3      &kp LCTRL                                                                                &kp SPACE  &mo 2
            >;
        };

        tri_layer {
            bindings = <
&kp N1      &kp N2      &kp N3      &kp N4  &kp N5    &trans  &trans     &trans        &trans      &trans
&kp F1      &kp F2      &kp F3      &kp F4  &kp F5    &trans  &kp PG_UP  &kp K_VOL_UP  &kp K_MUTE  &trans
&bt BT_CLR  &bt BT_NXT  &bt BT_PRV  &kp F6  &kp F7    &trans  &kp PG_DN  &kp K_VOL_DN  &trans      &trans
&trans      &trans                                                                     &trans      &trans
            >;
        };
    };
};
